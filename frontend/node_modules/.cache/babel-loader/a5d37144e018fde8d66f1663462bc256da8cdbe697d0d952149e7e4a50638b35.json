{"ast":null,"code":"// src/components/UserManagement.js\nimport React,{useState,useEffect}from'react';// UserManagement-komponentti hoitaa käyttäjien hallinnan ja CRUD-toiminnot\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function UserManagement(){// useState hook luo tilan käyttäjille ja uudelle käyttäjälle\nconst[users,setUsers]=useState([]);const[newUser,setNewUser]=useState({username:'',bio:''});const[editingUser,setEditingUser]=useState(null);// useEffect hook suorittaa koodin, kun komponentti ladataan\nuseEffect(()=>{// Hakee käyttäjät backendistä\nfetch('http://localhost:5000/api/users').then(response=>response.json()).then(data=>setUsers(data));},[]);// handleChange-funktio päivittää tilan, kun käyttäjä muuttaa lomakkeen kenttää\nconst handleChange=e=>{setNewUser({...newUser,[e.target.name]:e.target.value});};// handleSubmit-funktio käsittelee lomakkeen lähetyksen\nconst handleSubmit=e=>{e.preventDefault();if(editingUser){// Päivittää käyttäjän backendissä\nfetch(`http://localhost:5000/api/users/${editingUser.username}`,{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(newUser)}).then(response=>response.json()).then(updatedUser=>{setUsers(users.map(user=>user.username===updatedUser.username?updatedUser:user));setEditingUser(null);setNewUser({username:'',bio:''});});}else{// Lisää uuden käyttäjän backendissä\nfetch('http://localhost:5000/api/users',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(newUser)}).then(response=>response.json()).then(user=>setUsers([...users,user]));}};// handleEdit-funktio asettaa käyttäjän muokkaustilaan\nconst handleEdit=user=>{setEditingUser(user);setNewUser({username:user.username,bio:user.bio});};// handleDelete-funktio poistaa käyttäjän listasta\nconst handleDelete=username=>{fetch(`http://localhost:5000/api/users/${username}`,{method:'DELETE'}).then(()=>setUsers(users.filter(user=>user.username!==username)));};// Komponentin renderöinti\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"K\\xE4ytt\\xE4jien hallinta\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"K\\xE4ytt\\xE4j\\xE4nimi:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"username\",value:newUser.username,onChange:handleChange,disabled:!!editingUser})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Bio:\",/*#__PURE__*/_jsx(\"textarea\",{name:\"bio\",value:newUser.bio,onChange:handleChange})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:editingUser?'Update User':'Lisää Käyttäjä'})]}),/*#__PURE__*/_jsx(\"h2\",{children:\"K\\xE4ytt\\xE4j\\xE4luettelo\"}),/*#__PURE__*/_jsx(\"ul\",{children:users.map(user=>/*#__PURE__*/_jsxs(\"li\",{children:[user.username,\": \",user.bio,/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleEdit(user),children:\"Muokkaa\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleDelete(user.username),children:\"Poista\"})]},user.username))})]});}export default UserManagement;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","UserManagement","users","setUsers","newUser","setNewUser","username","bio","editingUser","setEditingUser","fetch","then","response","json","data","handleChange","e","target","name","value","handleSubmit","preventDefault","method","headers","body","JSON","stringify","updatedUser","map","user","handleEdit","handleDelete","filter","children","onSubmit","type","onChange","disabled","onClick"],"sources":["C:/Users/23755/Documents/user-management-app/frontend/src/components/UserManagement.js"],"sourcesContent":["// src/components/UserManagement.js\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n// UserManagement-komponentti hoitaa käyttäjien hallinnan ja CRUD-toiminnot\r\nfunction UserManagement() {\r\n    // useState hook luo tilan käyttäjille ja uudelle käyttäjälle\r\n    const [users, setUsers] = useState([]);\r\n    const [newUser, setNewUser] = useState({ username: '', bio: '' });\r\n    const [editingUser, setEditingUser] = useState(null);\r\n\r\n// useEffect hook suorittaa koodin, kun komponentti ladataan\r\n    useEffect(() => {     \r\n            // Hakee käyttäjät backendistä\r\n        fetch('http://localhost:5000/api/users')\r\n            .then(response => response.json())\r\n            .then(data => setUsers(data));\r\n            \r\n    }, []);\r\n\r\n\r\n\r\n    // handleChange-funktio päivittää tilan, kun käyttäjä muuttaa lomakkeen kenttää\r\n    const handleChange = (e) => {\r\n        setNewUser({\r\n            ...newUser,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n    // handleSubmit-funktio käsittelee lomakkeen lähetyksen\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (editingUser) {\r\n            // Päivittää käyttäjän backendissä\r\n            fetch(`http://localhost:5000/api/users/${editingUser.username}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(newUser)\r\n            })\r\n                .then(response => response.json())\r\n                .then(updatedUser => {\r\n                    setUsers(users.map(user => (user.username === updatedUser.username ? updatedUser : user)));\r\n                    setEditingUser(null);\r\n                    setNewUser({ username: '', bio: '' });\r\n                });\r\n        } else {\r\n            // Lisää uuden käyttäjän backendissä\r\n            fetch('http://localhost:5000/api/users', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(newUser)\r\n            })\r\n                .then(response => response.json())\r\n                .then(user => setUsers([...users, user]));\r\n        }\r\n    }\r\n\r\n    // handleEdit-funktio asettaa käyttäjän muokkaustilaan\r\n    const handleEdit = (user) => {\r\n        setEditingUser(user);\r\n        setNewUser({ username: user.username, bio: user.bio });\r\n    };\r\n\r\n    // handleDelete-funktio poistaa käyttäjän listasta\r\n\tconst handleDelete = (username) => {\r\n        fetch(`http://localhost:5000/api/users/${username}`, {\r\n            method: 'DELETE'\r\n        })\r\n            .then(() => setUsers(users.filter(user => user.username !== username)));\r\n    };\r\n\r\n\r\n    // Komponentin renderöinti\r\n    return (\r\n        <div>\r\n            <h1>Käyttäjien hallinta</h1>\r\n            {/* Lomakkeen lähetys kutsuu handleSubmit-funktiota */}\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    Käyttäjänimi:\r\n                    {/* Tekstikenttä, joka päivittää username-tilan ja estää muokkaamisen päivitystilan aikana */}\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"username\"\r\n                        value={newUser.username}\r\n                        onChange={handleChange}\r\n                        disabled={!!editingUser}\r\n                    />\r\n                </label>\r\n                <br />\r\n                <label>\r\nBio:\r\n                    {/* Tekstialue, joka päivittää bio-tilan */}\r\n                    <textarea\r\n                        name=\"bio\"\r\n                        value={newUser.bio}\r\n                        onChange={handleChange}\r\n                    />\r\n                </label>\r\n                <br />\r\n                {/* Lomakkeen lähetyspainike, joka vaihtaa tekstinsä päivitys- tai lisäystilanteen mukaan */}\r\n                <button type=\"submit\">{editingUser ? 'Update User' : 'Lisää Käyttäjä'}</button>\r\n            </form>\r\n            <h2>Käyttäjäluettelo</h2>\r\n            {/* Käyttäjälistan renderöinti */}\r\n            <ul>\r\n                {users.map(user => (\r\n                    <li key={user.username}>\r\n                        {user.username}: {user.bio}\r\n                        {/* Edit-painike, joka mahdollistaa käyttäjän muokkaamisen */}\r\n                        <button onClick={() => handleEdit(user)}>Muokkaa</button>\r\n                        {/* Delete-painike, joka poistaa käyttäjän */}\r\n                        <button onClick={() => handleDelete(user.username)}>Poista</button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserManagement;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}